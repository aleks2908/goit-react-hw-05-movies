{"version":3,"file":"static/js/541.995dc88d.chunk.js","mappings":"6PAuFA,UA/Ea,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KA8CA,OA5CAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,GACb,IAAME,EAAkB,IAAIC,gBAFd,wCAId,0FACkB,mCACC,+BAFnB,kBAKuBC,EAAAA,EAAAA,IAAA,UAHJ,+BAGI,kBACIV,EADJ,4BAJL,oCAMZ,CAAEW,OAAQH,EAAgBG,SAPhC,WAKUC,EALV,QAUcC,KAAKV,KAVnB,wBAWMW,EAAAA,GAAAA,MACE,2DACA,CACEC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,SAGXjB,GAAa,GAxBnB,2BA2BIF,EAAQQ,EAAKC,KAAKV,MAClBG,GAAa,GA5BjB,kDA8BIkB,QAAQC,IAAR,MA9BJ,2DAJc,sBAuCd,OAvCc,mCAsCdC,GACO,WACLlB,EAAgBmB,OACjB,CACF,GAAE,CAAC3B,KAGF,gCACGK,IACC,gBAAKuB,UAAWC,EAAAA,EAAAA,cAAhB,UACE,SAAC,IAAD,OAIJ,wBACG1B,EAAK2B,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,cAAeC,EAA3C,EAA2CA,GAA3C,OACR,2BACE,gBACEC,IACEJ,EAAY,0CAC2BA,GACnCK,EAENC,IAAKJ,EACLK,MAAO,OAET,uBAAIL,KACJ,uCAAeD,OAXRE,EAAKF,EADN,QAkBjB,C","sources":["components/Cast/Cast.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport css from '../../index.css';\nimport noPoster from '../../images/no-poster.jpg';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const abortController = new AbortController();\n\n    async function fetchData() {\n      const API_KEY = '6b1b36ecf2f3f3c0d27307e18cbffcb3';\n      const BASE_URL = 'https://api.themoviedb.org/3';\n\n      try {\n        const resp = await axios.get(\n          `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`,\n          { signal: abortController.signal }\n        );\n\n        if (!resp.data.cast) {\n          toast.error(\n            'Sorry, a request error occurred. Please try again later.',\n            {\n              position: 'top-right',\n              autoClose: 5000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n              theme: 'dark',\n            }\n          );\n          setIsLoading(false);\n          return;\n        }\n        setCast(resp.data.cast);\n        setIsLoading(false);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    fetchData();\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && (\n        <div className={css.vortexWrapper}>\n          <Loader />\n        </div>\n      )}\n\n      <ul>\n        {cast.map(({ profile_path, character, original_name, id }) => (\n          <li key={id + character}>\n            <img\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                  : noPoster\n              }\n              alt={original_name}\n              width={150}\n            />\n            <b>{original_name}</b>\n            <p>character: {character}</p>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\n\nexport default Cast;"],"names":["movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","useEffect","abortController","AbortController","axios","signal","resp","data","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","console","log","fetchData","abort","className","css","map","profile_path","character","original_name","id","src","noPoster","alt","width"],"sourceRoot":""}